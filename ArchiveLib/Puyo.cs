using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Text;
using VrSharp;
using VrSharp.Gvr;
using VrSharp.Pvr;
using PuyoTools.Modules.Archive;
using static ArchiveLib.GenericArchive;

// PVM/GVM archives used in Dreamcast/Gamecube games and their ports.
namespace ArchiveLib
{
    public enum PuyoArchiveType
    {
        Unknown,
        PVMFile,
        GVMFile,
    }

    public class PuyoFile : GenericArchive
    {
        // Archive chunks
        const uint Magic_PVM = 0x484D5650; // PVMH archive
        const uint Magic_GVM = 0x484D5647; // GVMH archive

        // PVM metadata chunks
        const uint Magic_MDLN = 0x4E4C444D; // Model Name
        const uint Magic_COMM = 0x4D4D4F43; // Model Comment
        const uint Magic_CONV = 0x564E4F43; // PVM Converter
        const uint Magic_IMGC = 0x43474D49; // Image Container
        const uint Magic_PVMI = 0x494D5650; // PVM File Info

        // Texture chunks
        const uint Magic_GBIX = 0x58494247; // PVR texture header (GBIX)
        const uint Magic_PVRT = 0x54525650; // PVR texture header (texture data)
        const uint Magic_PVRI = 0x49525650; // PVR texture header (metadata)

        public bool PaletteRequired;
        public PuyoArchiveType Type;

        public enum PVMFlags : ushort
        {
            GlobalIndex = 0x1,
            TextureDimensions = 0x2,
            PixelDataFormat = 0x4,
            Filenames = 0x8,
            ModelName = 0x10,
            Unknown = 0x100, // "Generated by PVMConv" maybe?
        }

        public override void CreateIndexFile(string path)
        {
            using (TextWriter texList = File.CreateText(Path.Combine(path, "index.txt")))
            {
                foreach (GenericArchiveEntry pvmentry in Entries)
                {
                    texList.WriteLine(pvmentry.Name);
                }
                texList.Flush();
                texList.Close();
            }
        }

        public static PuyoArchiveType Identify(byte[] data)
        {
            uint magic = BitConverter.ToUInt32(data, 0);
            switch (magic)
            {
                case Magic_PVM:
                    return PuyoArchiveType.PVMFile;
                case Magic_GVM:
                    return PuyoArchiveType.GVMFile;
                default:
                    return PuyoArchiveType.Unknown;
            }
        }

        public void AddPalette(string startPath)
        {
            VpPalette Palette = null;
            bool gvm = Type == PuyoArchiveType.GVMFile;
            using (System.Windows.Forms.OpenFileDialog a = new System.Windows.Forms.OpenFileDialog
            {
                DefaultExt = gvm ? "gvp" : "pvp",
                Filter = gvm ? "GVP Files|*.gvp" : "PVP Files|*.pvp",
                InitialDirectory = startPath,
                Title = "External palette file"
            })
            {
                if (a.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                    Palette = gvm ? (VpPalette)new GvpPalette(a.FileName) : (VpPalette)new PvpPalette(a.FileName);
            }
            foreach (GenericArchiveEntry entry in Entries)
            {
                if (entry is PVMEntry pvme)
                {
                    PvrTexture pvrt = new PvrTexture(pvme.Data);
                    if (pvrt.NeedsExternalPalette)
                        pvme.Palette = (PvpPalette)Palette;
                }
                else if (entry is GVMEntry gvme)
                {
                    GvrTexture gvrt = new GvrTexture(gvme.Data);
                    if (gvrt.NeedsExternalPalette)
                        gvme.Palette = (GvpPalette)Palette;
                }
            }
        }

        public PuyoFile() { }

        public int GetPVRTOffset(byte[] pvmdata, int offset)
        {
            uint header = BitConverter.ToUInt32(pvmdata, offset);
            int currentoffset = offset;
            int size = BitConverter.ToInt32(pvmdata, offset + 4);
            switch (header)
            {
                case Magic_MDLN:
                case Magic_CONV:
                case Magic_IMGC:
                case Magic_COMM:
                case Magic_PVMI:
                case Magic_PVRI: // This one probably shouldn't be here but there are no known examples yet of how this was used
                    goto default;
                case Magic_PVRT:
                    break;
                default:
                    byte[] metachunk = new byte[size];
                    Array.Copy(pvmdata, offset + 8, metachunk, 0, size);
                    currentoffset += size + 8;
                    // Go through metadata until it gets to a PVRT header
                    return GetPVRTOffset(pvmdata, currentoffset);
            }
            return currentoffset;
        }

        public PuyoFile(byte[] pvmdata)
        {
            Entries = new List<GenericArchiveEntry>();

            Type = Identify(pvmdata);
            switch (Type)
            {
                case PuyoArchiveType.PVMFile:
                case PuyoArchiveType.GVMFile:
                    break;
                default:
                    throw new Exception("Error: Unknown archive format");
            }

            if (Type == PuyoArchiveType.PVMFile)
            {
                // Get PVM flags and calculate item size in the entry table
                ushort numtextures = BitConverter.ToUInt16(pvmdata, 0x0A);
                int pvmentrysize = 2;
                int gbixoffset = 0;
                int nameoffset = 0;

                PVMFlags flags = (PVMFlags)BitConverter.ToUInt16(pvmdata, 0x08);
                {
                    if (flags.HasFlag(PVMFlags.Filenames))
                        nameoffset = pvmentrysize;
                    pvmentrysize += 28;
                    if (flags.HasFlag(PVMFlags.PixelDataFormat))
                        pvmentrysize += 2;
                    if (flags.HasFlag(PVMFlags.TextureDimensions))
                        pvmentrysize += 2;
                    if (flags.HasFlag(PVMFlags.GlobalIndex))
                        gbixoffset = pvmentrysize;
                    pvmentrysize += 4;
                }

                int offsetfirst = BitConverter.ToInt32(pvmdata, 0x4) + 8;
                int textureaddr = GetPVRTOffset(pvmdata, offsetfirst);

                for (int t = 0; t < numtextures; t++)
                {
                    int size_gbix = flags.HasFlag(PVMFlags.GlobalIndex) ? 16 : 0;
                    int size = BitConverter.ToInt32(pvmdata, textureaddr + 4);
                    byte[] pvrchunk = new byte[size + 8 + size_gbix];
                    Array.Copy(pvmdata, textureaddr, pvrchunk, 0 + size_gbix, size + 8);

                    // Add GBIX header if the PVM has GBIX enabled
                    if (flags.HasFlag(PVMFlags.GlobalIndex))
                    {
                        Array.Copy(BitConverter.GetBytes(Magic_GBIX), 0, pvrchunk, 0, 4);
                        pvrchunk[4] = 0x08; // Always 8 according to PuyoTools
                        byte[] gbix = BitConverter.GetBytes(BitConverter.ToUInt32(pvmdata, 0xC + pvmentrysize * t + gbixoffset));
                        Array.Copy(gbix, 0, pvrchunk, 9, 4);
                    }

                    // Set filename if the PVM has filenames
                    string entryfn = t.ToString("D3");
                    if (flags.HasFlag(PVMFlags.Filenames))
                    {
                        byte[] namestring = new byte[28];
                        Array.Copy(pvmdata, 0xC + pvmentrysize * t + nameoffset, namestring, 0, 28);
                        entryfn = Encoding.ASCII.GetString(namestring).TrimEnd((char)0);
                    }
                    textureaddr += size + 8;
                    PvrTexture pvrt = new PvrTexture(pvrchunk);
                    if (pvrt.NeedsExternalPalette)
                        PaletteRequired = true;
                    Entries.Add(new PVMEntry(pvrchunk, entryfn + ".pvr"));
                }
            }
            // If it's a GVM, just use Puyo Tools' reader
            else
            {
                ArchiveBase puyobase = new GvmArchive();
                ArchiveReader archiveReader = puyobase.Open(pvmdata);
                foreach (ArchiveEntry puyoentry in archiveReader.Entries)
                {
                    MemoryStream vrstream = (MemoryStream)puyoentry.Open();
                    GvrTexture gvrt = new GvrTexture(vrstream);
                    if (gvrt.NeedsExternalPalette)
                        PaletteRequired = true;
                    Entries.Add(new GVMEntry(vrstream.ToArray(), Path.GetFileName(puyoentry.Name)));
                }
            }
        }

        public override byte[] GetBytes()
        {
            MemoryStream pvmStream = new MemoryStream();
            ArchiveBase pvmbase = new PvmArchive();
            ArchiveWriter puyoArchiveWriter = pvmbase.Create(pvmStream);
            foreach (PVMEntry tex in Entries)
            {
                MemoryStream ms = new MemoryStream(tex.Data);
                puyoArchiveWriter.CreateEntry(ms, tex.Name);
            }
            puyoArchiveWriter.Flush();
            return pvmStream.ToArray();
        }
    }

    public class PVMEntry : GenericArchiveEntry
    {
        public uint GBIX;
        public PvpPalette Palette;

        public PVMEntry(byte[] pvrdata, string name)
        {
            Name = name;
            Data = pvrdata;
            PvrTexture pvrt = new PvrTexture(pvrdata);
            GBIX = pvrt.GlobalIndex;
        }

        public PVMEntry(string filename)
        {
            Name = Path.GetFileName(filename);
            Data = File.ReadAllBytes(filename);
            PvrTexture pvrt = new PvrTexture(Data);
            GBIX = pvrt.GlobalIndex;
        }

        public uint GetGBIX()
        {
            return GBIX;
        }

        public override Bitmap GetBitmap()
        {
            PvrTexture pvrt = new PvrTexture(Data);
            if (pvrt.NeedsExternalPalette)
                pvrt.SetPalette(Palette);
            return pvrt.ToBitmap();
        }
    }

    public class GVMEntry : GenericArchiveEntry
    {
        public uint GBIX;
        public GvpPalette Palette;

        public GVMEntry(byte[] gvrdata, string name)
        {
            Name = name;
            Data = gvrdata;
            GvrTexture gvrt = new GvrTexture(gvrdata);
            GBIX = gvrt.GlobalIndex;
        }

        public GVMEntry(string filename)
        {
            Name = Path.GetFileName(filename);
            Data = File.ReadAllBytes(filename);
            GvrTexture gvrt = new GvrTexture(Data);
            GBIX = gvrt.GlobalIndex;
        }

        public uint GetGBIX()
        {
            return GBIX;
        }

        public override Bitmap GetBitmap()
        {
            GvrTexture gvrt = new GvrTexture(Data);
            if (gvrt.NeedsExternalPalette)
                gvrt.SetPalette(Palette);
            return gvrt.ToBitmap();
        }
    }
}
