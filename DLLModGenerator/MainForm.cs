using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using SADXPCTools;
using SonicRetro.SAModel;

namespace DLLModGenerator
{
	public partial class MainForm : Form
	{
		private Properties.Settings Settings;

		public MainForm()
		{
			InitializeComponent();
		}

		static readonly Dictionary<string, string> typemap = new Dictionary<string, string>() {
			{ "landtable", "LandTable *" },
			{ "landtablearray", "LandTable **" },
			{ "model", "NJS_OBJECT *" },
			{ "modelarray", "NJS_OBJECT **" },
			{ "basicmodel", "NJS_OBJECT *" },
			{ "basicmodelarray", "NJS_OBJECT **" },
			{ "basicdxmodel", "NJS_OBJECT *" },
			{ "basicdxmodelarray", "NJS_OBJECT **" },
			{ "chunkmodel", "NJS_OBJECT *" },
			{ "chunkmodelarray", "NJS_OBJECT **" },
			{ "actionarray", "NJS_ACTION **" }
		};

		MyClass IniData;

		private void MainForm_Load(object sender, EventArgs e)
		{
			Settings = Properties.Settings.Default;
			if (Settings.MRUList == null)
				Settings.MRUList = new StringCollection();
			StringCollection mru = new StringCollection();
			foreach (string item in Settings.MRUList)
				if (File.Exists(item))
				{
					mru.Add(item);
					recentProjectsToolStripMenuItem.DropDownItems.Add(item.Replace("&", "&&"));
				}
			Settings.MRUList = mru;
			if (Program.Arguments.Length > 0)
				LoadINI(Program.Arguments[0]);
		}

		private void openToolStripMenuItem_Click(object sender, EventArgs e)
		{
			using (OpenFileDialog a = new OpenFileDialog()
			{
				DefaultExt = "ini",
				Filter = "INI Files|*.ini|All Files|*.*"
			})
				if (a.ShowDialog(this) == DialogResult.OK)
					LoadINI(a.FileName);
		}

		private void recentProjectsToolStripMenuItem_DropDownItemClicked(object sender, ToolStripItemClickedEventArgs e)
		{
			fileToolStripMenuItem.DropDown.Close();
			LoadINI(Settings.MRUList[recentProjectsToolStripMenuItem.DropDownItems.IndexOf(e.ClickedItem)]);
		}

		private void LoadINI(string filename)
		{
			IniData = IniFile.Deserialize<MyClass>(filename);
			if (Settings.MRUList.Contains(filename))
			{
				recentProjectsToolStripMenuItem.DropDownItems.RemoveAt(Settings.MRUList.IndexOf(filename));
				Settings.MRUList.Remove(filename);
			}
			Settings.MRUList.Insert(0, filename);
			recentProjectsToolStripMenuItem.DropDownItems.Insert(0, new ToolStripMenuItem(filename));
			Environment.CurrentDirectory = Path.GetDirectoryName(filename);
			listView1.BeginUpdate();
			foreach (KeyValuePair<string, string> item in IniData.Files.Items)
			{
				bool modified = HelperFunctions.FileHash(item.Key) != item.Value;
				listView1.Items.Add(new ListViewItem(new[] { item.Key, modified ? "Yes" : "No" }) { Checked = modified });
			}
			listView1.EndUpdate();
		}

		private void exitToolStripMenuItem_Click(object sender, EventArgs e)
		{
			Close();
		}

		private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
		{
			Settings.Save();
		}

		private void button1_Click(object sender, EventArgs e)
		{
			listView1.BeginUpdate();
			foreach (ListViewItem item in listView1.Items)
				item.Checked = true;
			listView1.EndUpdate();
		}

		private void button2_Click(object sender, EventArgs e)
		{
			listView1.BeginUpdate();
			foreach (ListViewItem item in listView1.Items)
				item.Checked = item.SubItems[2].Text != "No";
			listView1.EndUpdate();
		}

		private void button3_Click(object sender, EventArgs e)
		{
			listView1.BeginUpdate();
			foreach (ListViewItem item in listView1.Items)
				item.Checked = false;
			listView1.EndUpdate();
		}

		private void button4_Click(object sender, EventArgs e)
		{
			using (SaveFileDialog fd = new SaveFileDialog() { DefaultExt = "c", Filter = "C source files|*.c;*.cpp", InitialDirectory = Environment.CurrentDirectory, RestoreDirectory = true })
				if (fd.ShowDialog(this) == DialogResult.OK)
					using (TextWriter writer = File.CreateText(fd.FileName))
					{
						bool SA2 = IniData.Game == Game.SA2 || IniData.Game == Game.SA2B;
						ModelFormat modelfmt = 0;
						LandTableFormat landfmt = 0;
						switch (IniData.Game)
						{
							case Game.SA1:
								modelfmt = ModelFormat.Basic;
								landfmt = LandTableFormat.SA1;
								break;
							case Game.SADX:
								modelfmt = ModelFormat.BasicDX;
								landfmt = LandTableFormat.SADX;
								break;
							case Game.SA2:
								modelfmt = ModelFormat.Chunk;
								landfmt = LandTableFormat.SA2;
								break;
							case Game.SA2B:
								modelfmt = ModelFormat.Chunk;
								landfmt = LandTableFormat.SA2B;
								break;
						}
						writer.WriteLine("// Generated by SA Tools DLL Mod Generator");
						writer.WriteLine();
						if (SA2)
							writer.WriteLine("#include \"SA2ModLoader.h\"");
						else
							writer.WriteLine("#include \"SADXModLoader.h\"");
						writer.WriteLine();
						List<string> labels = new List<string>();
						int _i = 0;
						foreach (KeyValuePair<string, string> item in IniData.Files.Items)
							if (listView1.CheckedIndices.Contains(_i++))
								if (LandTable.CheckLevelFile(item.Key))
								{
									LandTable tbl = LandTable.LoadFromFile(item.Key);
									writer.WriteLine(tbl.ToStructVariables(landfmt, new List<string>()));
									labels.AddRange(tbl.GetLabels());
								}
								else if (ModelFile.CheckModelFile(item.Key))
								{
									SonicRetro.SAModel.Object mdl = new ModelFile(item.Key).Model;
									writer.WriteLine(mdl.ToStructVariables(modelfmt == ModelFormat.BasicDX, new List<string>()));
									labels.AddRange(mdl.GetLabels());
								}
								else if (Animation.CheckAnimationFile(item.Key))
								{
									Animation ani = Animation.Load(item.Key);
									writer.WriteLine(ani.ToStructVariables());
									labels.Add(ani.Name);
								}
						writer.WriteLine("void __cdecl Init(const char *path)");
						writer.WriteLine("{");
						writer.WriteLine("\tHMODULE handle = GetModuleHandle(L\"{0}\");", IniData.Name);
						foreach (KeyValuePair<string, string> item in IniData.ItemTypes.Items)
							writer.WriteLine("\t{0}{1} = ({0})GetProcAddress(handle, \"{1}\");", typemap[item.Value], item.Key);
						foreach (KeyValuePair<string, string> item in IniData.Labels.Items.Where((item) => labels.Contains(item.Value)))
							writer.WriteLine("\t{0} = &{1};", item.Key, item.Value);
						writer.WriteLine("}");
						writer.WriteLine();
						writer.WriteLine("extern \"C\" __declspec(dllexport) ModInfo {0}ModInfo = {{ ModLoaderVer, Init, NULL, 0, NULL, 0, NULL, 0, NULL, 0, NULL, 0 }};", SA2 ? "SA2" : "SADX");
					}
		}
	}

	public class MyClass
	{
		[IniName("name")]
		public string Name { get; set; }
		[IniName("game")]
		public Game Game { get; set; }
		public DictionaryContainer ItemTypes { get; set; }
		public DictionaryContainer Files { get; set; }
		public DictionaryContainer Labels { get; set; }

		public MyClass()
		{
			ItemTypes = new DictionaryContainer();
			Files = new DictionaryContainer();
			Labels = new DictionaryContainer();
		}
	}

	public class DictionaryContainer
	{
		[IniCollection]
		public Dictionary<string, string> Items { get; set; }

		public DictionaryContainer()
		{
			Items = new Dictionary<string, string>();
		}
	}

	static class Extensions
	{
		internal static List<string> GetLabels(this LandTable land)
		{
			List<string> labels = new List<string>() { land.Name };
			if (land.COLName != null)
			{
				labels.Add(land.COLName);
				foreach (COL col in land.COL)
					if (col.Model != null)
						labels.AddRange(col.Model.GetLabels());
			}
			if (land.AnimName != null)
			{
				labels.Add(land.AnimName);
				foreach (GeoAnimData gan in land.Anim)
				{
					if (gan.Model != null)
						labels.AddRange(gan.Model.GetLabels());
					if (gan.Animation != null)
						labels.Add(gan.Animation.Name);
				}
			}
			return labels;
		}

		internal static List<string> GetLabels(this SonicRetro.SAModel.Object obj)
		{
			List<string> labels = new List<string>() { obj.Name };
			if (obj.Attach != null)
				labels.AddRange(obj.Attach.GetLabels());
			if (obj.Children != null)
				foreach (SonicRetro.SAModel.Object o in obj.Children)
					labels.AddRange(o.GetLabels());
			return labels;
		}

		internal static List<string> GetLabels(this Attach att)
		{
			List<string> labels = new List<string>() { att.Name };
			if (att is BasicAttach)
			{
				BasicAttach bas = (BasicAttach)att;
				if (bas.VertexName != null)
					labels.Add(bas.VertexName);
				if (bas.NormalName != null)
					labels.Add(bas.NormalName);
				if (bas.MaterialName != null)
					labels.Add(bas.MaterialName);
				if (bas.MeshName != null)
					labels.Add(bas.MeshName);
			}
			else if (att is ChunkAttach)
			{
				ChunkAttach cnk = (ChunkAttach)att;
				if (cnk.VertexName != null)
					labels.Add(cnk.VertexName);
				if (cnk.PolyName != null)
					labels.Add(cnk.PolyName);
			}
			return labels;
		}
	}
}